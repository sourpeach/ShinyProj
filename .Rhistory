fit <- lm(child~parent, galton)
trans$residuals
summary(fit)
swirl(0)
summary(trans)
swirl()
mean(fit$residuals)
cov(fit$residuals, galton$parent)
plot res
mean(res)
mean(trans$residuals)
plot(mtcars$mpg,mtcars$am, xlab="MPG", ylab = "Transmission",cex = 1.1, pch = 21,frame = FALSE)
abline(lm(am~mpg, data = mtcars), lwd = 2)
lines(res)
lines(res, col=red)
lines(res, col="red")
plot(res)
sumCoef <- summary(trans)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
swirl()
swirl()
libarary(swirl)
library(swirl)
install_from_swirl("Regression Models")
swirl()
summary(res)
cov(trans$residuals,mtcars$am)
library(MASS)
?shuttle
glm(shuttle$use~shuttle$wind="head", family= "binomial")
glm(shuttle$use~shuttle$wind=="head", family= "binomial")
glm(shuttle$use~factor(shuttle$wind), family= "binomial")
glm(factor(shuttle$wind)~magn, family= "binomial")
glm(shuttle$wind~magn, family= "binomial")
glm(factor(shuttle$wind)~shuttle$magn, family= "binomial")
glm(shuttle$magn~factor(shuttle$wind), family= "binomial")
glm(shuttle$wind~shuttle$magn, family= "binomial")
glm(shuttle$magn~shuttle$wind, family= "binomial")
?glm
glm(shuttle$magn~shuttle$wind)
glm(shuttle$magn~shuttle$wind, family= "gaussian")
glm(shuttle$magn~shuttle$wind, family= "binomial")
glm(shuttle$magn~shuttle$wind, family= "poisson")
glm(shuttle$magn~shuttle$wind, family= "binomial")
glm(shuttle$use~factor(shuttle$wind)+shuttle$magn, family= "binomial")
glm(shuttle$use~shuttle$wind+shuttle$magn, family= "binomial")
glm(shuttle$use~shuttle$wind=="head"+shuttle$magn, family= "binomial")
glm(shuttle$use~factor(shuttle$wind)+shuttle$magn, family= "binomial")
glm(shuttle$use~shuttle$wind+factor(shuttle$magn), family= "binomial")
exp(glm(shuttle$use~shuttle$wind+factor(shuttle$magn), family= "binomial"))
exp(confint(glm(shuttle$use~shuttle$wind+factor(shuttle$magn), family= "binomial")))
exp(confint(glm(shuttle$use~factor(shuttle$wind)+shuttle$magn, family= "binomial")))
glm(shuttle$use~factor(shuttle$wind), family= "binomial")
glm(shuttle$use~factor(shuttle$wind) + shuttle$magn, family= "binomial")
glm(shuttle$use~shuttle$wind, family= "binomial")
glm(shuttle$use~shuttle$wind + shuttle$magn, family= "binomial")
glm(shuttle$use~shuttle$wind + shuttle$magn)
glm(shuttle$use~shuttle$wind + shuttle$magn, family = poisson())
a <-glm(shuttle$use~shuttle$wind + shuttle$magn, family= "binomial")
summary(a)
expn(a)
confit(a)
confint(a)
exp(confint(a))
b<-lm(shuttle$use~shuttle$wind + shuttle$magn, family= "binomial")
b<-lm(shuttle$use~shuttle$wind + shuttle$magn)
?lm
b<-lm(shuttle$use~shuttle$wind)
a <-glm(shuttle$use~shuttle$wind - shuttle$magn, family= "binomial")
a
exp(confint(a))
a <-glm(shuttle$use~shuttle$wind ~ shuttle$magn, family= "binomial")
a <-glm(shuttle$use~shuttle$wind +shuttle$magn, family= "binomial")
a
exp(confint(a))
lm(shuttle$use~shuttle$wind)
lm(shuttle$use~shuttle$wind+shuttle$magn)
summary(a)
glm(InsectSpray$A~InsectSpray$B, family = poisson())
library(InsectSpray)
glm(InsectSprays$A~InsectSprays$B, family = poisson())
library(InsectSprays)
?InsectSprays
names(InsectSprays)
glm(InsectSprays$count~InsectSprays$spray, family = poisson())
round(exp(coef(lm(I(log((InsectSprays$count~InsectSprays$spray, family = poisson()))
round(exp(coef(lm(I(log((InsectSprays$count~InsectSprays$spray, family = poisson())))))))
round(exp(coef(lm(I(log((InsectSprays$count~InsectSprays$spray)))))))
glm(InsectSprays$count~factor(InsectSprays$spray), family = poisson())
a <- glm(shuttle$use~shuttle$wind +offset(shuttle$magn), family= "binomial")
a <- glm(shuttle$use~shuttle$wind + shuttle$magn, family= "binomial")
a
summary(a)
glm(count ~ x + offset(t), family = poisson)
log(10)
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
line(x=0)
line(x==0)
lines(x==0)
glm(InsectSprays$count~InsectSprays$spray, family = poisson())
summary(glm(InsectSprays$count~InsectSprays$spray, family = poisson()))
?shuttle
lm(shuttle$auto~shuttle$wind)
lm(shuttle$use~shuttle$wind)
confint(lm(shuttle$use~shuttle$wind))
exp(lm(shuttle$use~shuttle$wind))
b <- lm(shuttle$use~shuttle$wind)
exp(b$coeff)
exp(a$coeff)
a
c <- glm(formula = shuttle$use ~ shuttle$wind, family = "binomial")
exp(c$coeff)
b
d <- glm(InsectSprays$count~InsectSprays$spray, family = poisson())
exp(d$coeff)
d
d <- glm(InsectSprays$spray~InsectSprays$count, family = poisson())
d <- glm.fit(InsectSprays$count~InsectSprays$spray, family = poisson())
c <- glm(formula = shuttle$use ~ shuttle$wind +offset(shuttle$magn), family = "binomial")
confint(d)
summary(d)
exp(confint(d$coeff))
exp(confint(d))
exp(d)
exp(d$coeff)
library(AppliedPredictiveModeling)
install.pckages(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
data(AlzheimerDiesease)
data(AlzheimerDisease)
?createDataPartition
data(concrete)
set.seed(975)
nTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training = mixtures[ inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?hsmic
install.packages("hsmic")
install.packages("hmisc")
install.packages("Hmisc")
CompressiveStrength <- cut2(training$testing)
library(Hmisc)
CompressiveStrength <- cut2(training$testing)
outcome <- cut2(training&CompressiveStrength)
?cut2
outcome <- cut2(training&CompressiveStrength, g=3 )
outcome <- cut2(training&CompressiveStrength, g=3)
outcome <- cut2(training&CompressiveStrength, g=3)
outcome <- cut2(training&CompressiveStrength, g=3)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
outcome <- cut2(training&CompressiveStrength, g=3)
CompressiveStrength
names(mixtures)
names(training)
outcome <- cut2(training&CompressiveStrength,g=3)
outcome <- cut2(training&CompressiveStrength)
outcome <- cut2(training$CompressiveStrength, g=3)
summary(outcome)
outcome
table(outcome)
class(outcome)
summary(concrete)
gplot(outcome,age,data = training, fill=outcome,geom=c("boxplot"))
library(ggplot2)
gplot(outcome,age,data = training, fill=outcome,geom=c("boxplot"))
library(ISLR)
qplot(outcome,age,data = training, fill=outcome,geom=c("boxplot"))
qplot(outcome,age,data = training, fill=outcome,geom=c("boxplot"))
qplot(outcome,age,data = training
)
qplot(outcome,age,data = training)
qplot(outcome,age,data = concrete)
qplot(outcome,age,data = training, fill=outcome)
qplot(outcome,age,data = training, fill=outcome,geom=c("boxplot"))
summary(training)
qplot(outcome,Age,data = training, fill=outcome,geom=c("boxplot"))
?hist
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
summary(training)
names(training)
subtraining <- training[,range(58:69)]
names(subtraining)
subtraining <- training[,58:69]
names(subtraining)
preProcess(subtraining,thresh = .9)
?log
?predic
?predict
preProc <- preProcess(subtraining,thresh = .9)
predict(preProc)
predict(preProc,subtraining)
predtrain <- predict(preProc,subtraining)
count(pretrain)
names(pretrain)
names(predtrain)
preProcess(subtraining,thresh = .9)
summary(preProc)
View(predtrain)
names(training)
preProc <- preProcess(subtrain[,58:69], thresh = .9)
preProc <- preProcess(training[,58:69], thresh = .9)
summary(preProc)
preProc <- preProcess(training, thresh = .9)
preProc <- preProcess(predtrain, thresh = .9)
summary(preProc)
predtrain <- predict(subtrain)
predtrain <- predict(subtraininig)
predtrain <- predict(subtraining)
prcomp(subtraining)
preComp <-prcomp(subtraining)
summary(preComp)
predict(train$59)
names(train[,59:68])
pred <- predict(subtraining)
pred <- predict(subtraining[,1])
test1 <- subtraining[,1]
predict(test1)
pred <- predict(preProc)
pred <- predict(preProc,subtraining)
summary(pred)
summary(preProc)
preProc <- preProcess(subtraining, thresh = .9)
summary(preProc)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
preProc <- preProcess(training[,58:69], thresh = .9)
summary(preProc)
preProc
subtrain <- training[,58:69]
names(subtrain)
preProc
preProc$numComp
preProc2 <- preProcess(testing[,58:69], thresh = .9)
summary(preProc2)
summary(preProcess(adData, thresh = .9))
preProc2 <- preProcess(adData[,58:69], thresh = .9)
summary(preProc2)
summary(preProc)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subtrain <- training [,58:69]
preProc <- preProcess(subtrain, thresh = .8)
pred <- predict(preProc)
pred <- predict(preProc, subtrain)
?glm
preProc <- preProcess(subtrain)
pred1 <- predict(preProc, subtrain)
glm(pred1~pred)
glm(pred1~pred, data= subtrain)
glm(pred1~pred, data= inTrain)
summary(pred1)
summary(preProc(pred1))
summary(preProcess(pred1))
summary(preProcess(pred))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc<- preProcess(training[,58:69],p)
preProc<- preProcess(training[,58:69],thresh = .8)
summary(preProc)
pred <- predict(preProc, training[,58:69])
summary(pred)
?predict
preComp(pred)
summary(preProc)
summary(pred)
summary(preProcess(pred))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
head(segmentationOriginal$Case)
?createDataPartition
train = segmentationOriginal$Case == "Train"
train = segmentationOriginal[,train]
train = segmentationOriginal[train,]
test = segmentationOriginal[-train,]
test = segmentationOriginal$Case =="Test"
test = segmentationOriginal[test,]
?rpart
?fancyRpartPlot
library(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
?cart
?CART
?rpart
?rpart
?rpart
?seed
?set.seed
?rpart
??rpart
inTrain <- createDataPartition(y = segmentationOriginal$Case, list= F)
inTrain <- segmentationOriginal[inTrain,]
inTrain <- createDataPartition(y = segmentationOriginal$Case, list= F)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
View(testing)
inTrain <- createDataPartition(y = segmentationOriginal$Case)
testing <- segmentationOriginal[-inTrain,]
training <- segmentationOriginal[inTrain,]
inTrain <- createDataPartition(y = segmentationOriginal$Case, list= F)
View(inTrain)
inTrain <- createDataPartition(y = segmentationOriginal$Case,p = .5, list= F)
training <- segmentationOriginal[inTrain,]
View(training)
testing <- segmentationOriginal[-inTrain,]
View(testing)
library(caret)
wd
/wd
?wd
read.csv(https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv,header = T, sep = ",")
read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",header = T, sep = ",")
urltrain <- https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
urltrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
read.csv(urltrain, header = T, sep = ",")
urltrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
read.csv(urltrain, header = T, sep = ",")
trainingOrg <- read.csv(urltrain, header = T, sep = ",")
names(trainingOrg)
?preProcess
cleantraining <- preProc(trainingOrg, method = c("center","scale"), tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg, method = c("center","scale"), tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg, "knnImput", tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg, "knnImpute", tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg,method = "knnImpute", tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg[,-160],method = "knnImpute", tresh = 0.99, na.remove = T )
head(trainigOrg)
head(trainingOrg)
names(traingOrg)
names(trainingOrg)
cleantraining <- preProcess(trainingOrg[,1:7],method = "knnImpute", tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg[,7:],method = "knnImpute", tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg[,-1:7],method = "knnImpute", tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg[,-1:7], method = "knnImpute", tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg[,-1:8], method = "knnImpute", tresh = 0.99, na.remove = T )
cleantraining <- preProcess(trainingOrg[,-1:8], method = "knnImpute")
cleantraining <- preProcess(trainingOrg[,-160, method = "knnImpute")
cleantraining <- preProcess(trainingOrg[,-160], method = "knnImpute")
cleantraining <- preProcess(trainingOrg[,-1:7+-160], method = "knnImpute")
cleantraining <- preProcess(trainingOrg[,-1:7], method = "knnImpute")
subtrain <- trainingOrg[,-1:7]
subtrain <- trainingOrg[,-0:7]
names(subtrain)
subtrain <- trainingOrg[,8:160]
names(subtrain)
preObj <- preProcess(subtrain, method="knnImpute")
preObj <- preProcess(subtrain[,-160], method="knnImpute")
preObj <- preProcess(subtrain[,-153], method="knnImpute")
preObj <- preProcess(subtrain[,-152], method="knnImpute")
preObj <- preProcess(subtrain, method = c("center","scale"), na.remove = T)
preObj <- preProcess(subtrain[,-152], method="knnImpute")
NAs <- apply(trainingOrg, 2, function(x) {
sum(is.na(x))
NAs <- apply(trainingOrg, 2, function(x) {
sum(is.na(x))
})
na <- is.na(trainingOrg)
count(trainingOrg[is.na(trainingOrg)])
?count
len(trainingOrg[is.na(trainingOrg)])
?length
length(trainingOrg[is.na(trainingOrg)])
preObj <- preProcess(subtrain[,-153], method="knnImpute")
preObj <- preProcess(subtrain, method="knnImpute")
training <- trainingOrg
training[is.na(training)]<-0
length(training[is.na(training)])
training <- trainingOrg[!is.na(trainingOrg)]
training <- trainingOrg[complete.cases(trainingOrg),]
training <- trainingOrg[,complete.cases(trainingOrg)]
training <- trainingOrg[!is.na(trainingOrg)]
training <- trainingOrg[!is.na(trainingOrg),]
training <- trainingOrg[,complete.cases(trainingOrg)]
training <- subtrain[,colSums(is.na(subtrain))<nrow(subtrain)]
training <- subtrain[,colSums(is.na(subtrain)]
training <- subtrain[,colSums(is.na(subtrain))]
training <- subtrain[,colSums(is.na(subtrain))==0]
names(training)
inTrain <- createDataPartition(training$classe,p=0.6,list = F)
subtrain <- training[inTrain,]
subtesting <- training[-inTrain,]
modelfit <- train(classe~.,data=subtrain,method="rf",prox = T)
modelfit <- train(classe~.,data=subtrain,method="rf",prox = T)
modelfit <- train(classe~.,data=subtrain,method="rf")
library("caret", lib.loc="~/Library/R/3.1/library")
library("randomForest", lib.loc="~/Library/R/3.1/library")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
dim(vowel.test)
dim(vowel.train)
names(vowel.test)
mod1 <- train(y~.,method = "rf",data = vowel.test)
library(caret)
mod1 <- train(y~.,method = "rf",data = vowel.test)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
install.packages("shiny")
library(shiny)
cars
summary(cars)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("~/DataProductProj")
author("Laura")
setwd("~/ShinyTest")
runApp()
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
}
)
runA
shinyServer()}
)
ru
}
)
r
}
)
r}
)
r}
)
r}
)
r}
)
r\
library(shiny)shinyServer(    function(input, output) {    })
library(shiny)shinyServer(    function(input, output) {    })
runApp()
runApp(~/ShinyTest/)
runApp("~/ShinyTest/")
runApp(~/ShinyTest/)
runApp("~/ShinyTest/")
